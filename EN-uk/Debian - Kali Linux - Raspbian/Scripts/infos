#!/bin/sh

Help()
{
	echo "\e[32m\e[1m=====================\e[0m"
	echo "\e[32m\e[1m=    Information    =\e[0m"
	echo "\e[32m\e[1m=====================\e[0m\n"
	echo "\e[32m\e[1mLanguage:\e[0m    EN-uk"
	echo "\e[32m\e[1mScript name:\e[0m Infos"
	echo "\e[32m\e[1mCommand:\e[0m     infos"
	echo "\e[32m\e[1mAuthor:\e[0m      Kalvez"
	echo "\e[32m\e[1mLocation:\e[0m    /usr/bin/"
	echo "\e[32m\e[1mVersion:\e[0m     3.4.0.20200824\n"
	echo "\e[32m\e[1m================\e[0m"
	echo "\e[32m\e[1m=    Detail    =\e[0m"
	echo "\e[32m\e[1m================\e[0m\n"
	echo "You must execute the script with root permissions.\n"
	echo "This script displays a lot of information about the operating system, but also about the specs of the computer and some other pactical data\n"
	exit 0
}

converterMiB()
{
	mib=1048.576
	memory=0
	memory=$1
	memory=$(echo "$memory/$mib" |bc)
	echo "$memory"
}

gpuVendor()
{
	gpu_vendor=0
	gpu_vendor=$1
	if [ "$gpu_vendor" = "NVIDIA" ]
	then
		gpu_vendor=$(lspci | grep VGA | grep NVIDIA | awk '{print $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20}')
	elif [ "$gpu_vendor" = "Intel" ]
	then
	  gpu_vendor=$(lspci | grep VGA | grep Intel | awk '{print $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20}')
	elif [ "$gpu_vendor" = "Advanced" ]
	then
	  gpu_vendor=$(lspci | grep VGA | grep Advanced | awk '{print $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20}')
	elif [ "$gpu_vendor" = "VMware" ]
	then
		gpu_vendor=$(lspci | grep VGA | grep VMware | awk '{print $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20}')
	else
		gpu_vendor=0
		gpu_vendor="None / Unknown"
	fi
	echo "$gpu_vendor"
}

displayInfo()
{
	echo "\e[32m\e[1m==============================\e[0m"
	echo "\e[32m\e[1m=    Software information    =\e[0m"
	echo "\e[32m\e[1m==============================\e[0m\n"
	echo "\e[32m\e[1mDistro. ID:\e[0m   $distributor_id"
	echo "\e[32m\e[1mDescription:\e[0m   $description"
	echo "\e[32m\e[1mRelease:\e[0m       $release"
	echo "\e[32m\e[1mCodename:\e[0m      $codename"
	echo "\e[32m\e[1mOS Type:\e[0m        $os_type"
	echo "\e[32m\e[1mArchitecture:\e[0m   $architecture"
	echo "\e[32m\e[1mDevice Name:\e[0m    $device_name"
	echo "\e[32m\e[1mUser(s):\e[0m        $users"
	echo "\e[32m\e[1mUptime:\e[0m        $uptime"
	echo "\e[32m\e[1mKernel Version:\e[0m	$kernel_info\n"
	echo "\e[32m\e[1m============================\e[0m"
	echo "\e[32m\e[1m=    Device information    =\e[0m"
	echo "\e[32m\e[1m============================\e[0m\n"
	echo "\e[32m\e[1mManufacturer:\e[0m   $system_manufacturer"
	echo "\e[32m\e[1mModel:\e[0m          $system_model"
	echo "\e[32m\e[1mDevice Type:\e[0m    $device_type"
	echo "\e[32m\e[1mScreen Res.:\e[0m    $screen_resolution"
	echo "\e[32m\e[1mProcessor:\e[0m      $cpu_model"
	echo "\e[32m\e[1mGraphics 0:\e[0m     $gpu_vendor0"
	echo "\e[32m\e[1mGraphics 1:\e[0m     $gpu_vendor1"
	echo "\e[32m\e[1mFree Memory:\e[0m    $available_ram MiB / $total_ram MiB"
	echo "\e[32m\e[1mCached Swap:\e[0m    $cached_swap MiB / $total_swap MiB"
	echo "\e[32m\e[1mRoot Partition:\e[0m $root_part_available"B" / $root_part_total"B" Available"
	echo "\e[32m\e[1mHome Partition:\e[0m $home_part_available"B" / $home_part_total"B" Available"
	echo "\e[32m\e[1mBaseboard:\e[0m      $baseboard | $baseboard_version"
	echo "\e[32m\e[1mBaseboard S/N:\e[0m  $baseboard_serial"
	echo "\e[32m\e[1mBIOS Version:\e[0m   $bios_version | $bios_date"
	echo "\e[32m\e[1mDevice S/N:\e[0m     $serial\n"
}

fetchInfo()
{
	distributor_id=$(lsb_release -ar 2>/dev/null | grep 'Distributor ID' | awk '{$1=$2=""; print $0}')
	description=$(lsb_release -ar 2>/dev/null | grep Description | awk '{$1=""; print $0}')
	release=$(lsb_release -ar 2>/dev/null | grep Release | awk '{$1=""; print $0}')
	codename=$(lsb_release -ar 2>/dev/null | grep Codename | awk '{$1=""; print $0}')
	os_type=$(uname -o)
	architecture=$(uname -i)
	device_name=$(uname -n)
	users=$(users)
	uptime=$(uptime)
	kernel_info=$(uname -srv)
	system_manufacturer=$(dmidecode -s system-manufacturer)
	system_model=$(dmidecode -s system-product-name)
	device_type=$(dmidecode -s chassis-type)
	screen_resolution=$(xdpyinfo | grep dimensions | awk '{print $2}')
	cpu_model=$(cat /proc/cpuinfo | grep "model name" | uniq | awk '{print $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20}')
	total_ram=$(grep -Eom1 '[0-9]{1,9}' /proc/meminfo | tail -1	)
	total_ram=$(converterMiB $total_ram)
	available_ram=$(grep -Eom3 '[0-9]{1,9}' /proc/meminfo | tail -1)
	available_ram=$(converterMiB $available_ram)
	total_swap=$(grep -Eom15 '[0-9]{1,9}' /proc/meminfo | tail -1)
	total_swap=$(converterMiB $total_swap)
	cached_swap=$(grep -Eom6 '[0-9]{1,9}' /proc/meminfo | tail -1)
	cached_swap=$(converterMiB $cached_swap)
	root_part_available=$(df -Ph / | tail -1 | awk '{print $4}')
	root_part_total=$(df -Ph / | tail -1 | awk '{print $2}')
	home_part_available=$(df -Ph . | tail -1 | awk '{print $4}')
	home_part_total=$(df -Ph . | tail -1 | awk '{print $2}')
	baseboard=$(dmidecode -s baseboard-product-name)
	baseboard_version=$(dmidecode -s baseboard-version)
	baseboard_serial=$(dmidecode -s baseboard-serial-number)
	bios_version=$(dmidecode -s bios-version)
	bios_date=$(dmidecode -s bios-release-date)
	serial=$(dmidecode -s system-serial-number)
	gpu_vendor0=$(lspci | grep 00:02.0 | awk '{print $5}')
	gpu_vendor0=$(gpuVendor $gpu_vendor0)
	gpu_vendor1=$(lspci | grep 01:00.0 | awk '{print $5}')
	gpu_vendor1=$(gpuVendor $gpu_vendor1)

	displayInfo
}

distributor_id=0
description=0
release=0
codename=0
os_type=0
architecture=0
device_name=0
users=0
uptime=0
kernel_info=0
system_manufacturer=0
system_model=0
device_type=0
screen_resolution=0
cpu_model=0
total_ram=0
available_ram=0
total_swap=0
cached_swap=0
root_part_available=0
root_part_total=0
home_part_available=0
home_part_total=0
baseboard=0
baseboard_version=0
baseboard_serial=0
bios_version=0
bios_date=0
serial=0
gpu_vendor0=0
gpu_vendor1=0

echo "\e[31m\e[1m***************\e[0m"
echo "\e[31m\e[1m*    INFOS    *\e[0m"
echo "\e[31m\e[1m***************\e[0m\n"

if [ $1 = "-h" 2>/dev/null ] || [ $1 = "--help" 2>/dev/null ]
then
	Help
else
	if [ "$(id -u)" != "0" ]
	then
		echo "\e[31m\e[1mThis script must be executed with root privileges.\e[0m\n" 1>&2
		exit 1
	else
		fetchInfo
	fi
fi
